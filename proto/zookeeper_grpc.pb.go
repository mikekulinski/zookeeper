// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: zookeeper.proto

package zookeeper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Zookeeper_Message_FullMethodName = "/zookeeper.Zookeeper/Message"
)

// ZookeeperClient is the client API for Zookeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZookeeperClient interface {
	// SendMessage is the generic bidirectional stream used for all communication between client and server.
	Message(ctx context.Context, opts ...grpc.CallOption) (Zookeeper_MessageClient, error)
}

type zookeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewZookeeperClient(cc grpc.ClientConnInterface) ZookeeperClient {
	return &zookeeperClient{cc}
}

func (c *zookeeperClient) Message(ctx context.Context, opts ...grpc.CallOption) (Zookeeper_MessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Zookeeper_ServiceDesc.Streams[0], Zookeeper_Message_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &zookeeperMessageClient{stream}
	return x, nil
}

type Zookeeper_MessageClient interface {
	Send(*ZookeeperRequest) error
	Recv() (*ZookeeperResponse, error)
	grpc.ClientStream
}

type zookeeperMessageClient struct {
	grpc.ClientStream
}

func (x *zookeeperMessageClient) Send(m *ZookeeperRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zookeeperMessageClient) Recv() (*ZookeeperResponse, error) {
	m := new(ZookeeperResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ZookeeperServer is the server API for Zookeeper service.
// All implementations must embed UnimplementedZookeeperServer
// for forward compatibility
type ZookeeperServer interface {
	// SendMessage is the generic bidirectional stream used for all communication between client and server.
	Message(Zookeeper_MessageServer) error
	mustEmbedUnimplementedZookeeperServer()
}

// UnimplementedZookeeperServer must be embedded to have forward compatible implementations.
type UnimplementedZookeeperServer struct {
}

func (UnimplementedZookeeperServer) Message(Zookeeper_MessageServer) error {
	return status.Errorf(codes.Unimplemented, "method Message not implemented")
}
func (UnimplementedZookeeperServer) mustEmbedUnimplementedZookeeperServer() {}

// UnsafeZookeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZookeeperServer will
// result in compilation errors.
type UnsafeZookeeperServer interface {
	mustEmbedUnimplementedZookeeperServer()
}

func RegisterZookeeperServer(s grpc.ServiceRegistrar, srv ZookeeperServer) {
	s.RegisterService(&Zookeeper_ServiceDesc, srv)
}

func _Zookeeper_Message_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZookeeperServer).Message(&zookeeperMessageServer{stream})
}

type Zookeeper_MessageServer interface {
	Send(*ZookeeperResponse) error
	Recv() (*ZookeeperRequest, error)
	grpc.ServerStream
}

type zookeeperMessageServer struct {
	grpc.ServerStream
}

func (x *zookeeperMessageServer) Send(m *ZookeeperResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zookeeperMessageServer) Recv() (*ZookeeperRequest, error) {
	m := new(ZookeeperRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Zookeeper_ServiceDesc is the grpc.ServiceDesc for Zookeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zookeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zookeeper.Zookeeper",
	HandlerType: (*ZookeeperServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Message",
			Handler:       _Zookeeper_Message_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "zookeeper.proto",
}
