syntax = "proto3";

package zookeeper;

option go_package = "github.com/mikekulinski/zookeeper/proto/zookeeper";

/*
Messages for establishing and closing connections to Zookeeper.
*/
message ConnectRequest {
  // The UUID that represents the session.
  // TODO: Replace this with a field saved as a header.
  string client_id = 1;
}

message ConnectResponse{}

message CloseRequest{
  // The UUID that represents the session.
  // TODO: Replace this with a field saved as a header.
  string client_id = 2;
}

message CloseResponse{}

/*
Messages that define the schema of each of our main APIs for the service.
 */

message CreateRequest {
  // The virtual file path to the ZNode that we'd like to create. Follows standard Unix file path conventions.
  string path = 1;
  // The data that we'd like to save in the ZNode we're creating.
  bytes data = 2;

  enum Flag {
    // FLAG_EPHEMERAL indicates that the ZNode to be created should be automatically destroyed once the session
    // has been terminated (either intentionally or on failure).
    FLAG_EPHEMERAL = 0;

    // FLAG_SEQUENTIAL indicates that the node to be created should have a monotonically increasing counter appended
    // to the end of the provided name.
    FLAG_SEQUENTIAL = 1;
  }
  // Flags are an optional array of arguments to create different types of ZNodes.
  repeated Flag flags = 3;
}

message CreateResponse{
  // The name that Zookeeper has given to the ZNode. This is relevant when passing FLAG_SEQUENTIAL since the server
  // will add a monotonically increasing as a suffix to the name.
  string z_node_name = 1;
}

message DeleteRequest {
  // The virtual file path to the ZNode that we'd like to delete.
  string path = 1;
  // The version that this ZNode is expected to be at. If the versions do not match, then we will fail the request.
  int64 version = 2;
}

message DeleteResponse {}

message ExistsRequest {
  // The virtual file path to the ZNode we are checking.
  string path = 1;
  // A flag indicating whether we would like to receive a callback for when this file changes.
  bool watch = 2;
}

message ExistsResponse {
  // Whether or not that file exists.
  bool exists = 1;
}

message GetDataRequest {
  // The virtual file path to the ZNode we are checking.
  string path = 1;
  // A flag indicating whether we would like to receive a callback for when this file changes.
  bool watch = 2;
}

message GetDataResponse {
  // The data saved at this ZNode.
  bytes data = 1;
  // The version of this ZNode.
  int64 version = 2;
}

message SetDataRequest {
  // The virtual file path to the ZNode we are checking.
  string path = 1;
  // The data to save on this ZNode.
  bytes data = 2;
  // The version we expect this ZNode to be at.
  int64 version = 3;
}

message SetDataResponse {}

message GetChildrenRequest {
  // The virtual file path to the ZNode we are checking.
  string path = 1;
  // A flag indicating whether we would like to receive a callback for when any of the children of this ZNode change.
  bool watch = 2;
}

message GetChildrenResponse {
  // The file names of the children of the requested ZNode. This is just the file name. You can get the full path
  // by appending this to the path to the parent.
  // i.e. {parent_path}/{child_name}
  repeated string children = 1;
}

message SyncRequest {
  // The virtual file path to the ZNode we are checking. This path is currently unused.
  string path = 1;
}

message SyncResponse {}

// Zookeeper is gRPC implementation of the Zookeeper outlined in the following white paper.
// www.usenix.org/legacy/event/atc10/tech/full_papers/Hunt.pdf
service Zookeeper {
  /*
  Methods to manage the connection to Zookeeper.
  */
  rpc Connect (ConnectRequest) returns (ConnectResponse) {}

  rpc Close (CloseRequest) returns (CloseResponse) {}

  /*
  Methods for using the actual Zookeeper service.
  */

  // Create creates a ZNode with path name path, stores data in it, and returns the name of the new ZNode
  // Flags can also be passed to pick certain attributes you want the ZNode to have.
  rpc Create (CreateRequest) returns (CreateResponse) {}

  // Delete deletes the ZNode at the given path if that ZNode is at the expected version.
  rpc Delete (DeleteRequest) returns (DeleteResponse) {}

  // Exists returns true if the ZNode with path name path exists, and returns false otherwise. The watch flag
  // enables a client to set a watch on the ZNode.
  rpc Exists (ExistsRequest) returns (ExistsResponse) {}

  // GetData returns the data and metadata, such as version information, associated with the ZNode.
  // The watch flag works in the same way as it does for exists(), except that ZooKeeper does not set the watch
  // if the ZNode does not exist.
  rpc GetData (GetDataRequest) returns (GetDataResponse) {}

  // SetData writes data to the ZNode path if the version number is the current version of the ZNode.
  rpc SetData (SetDataRequest) returns (SetDataResponse) {}

  // GetChildren returns the set of names of the children of a ZNode.
  rpc GetChildren (GetChildrenRequest) returns (GetChildrenResponse) {}

  // Sync waits for all updates pending at the start of the operation to propagate to the server
  // that the client is connected to. The path is currently ignored. (Using path is not discussed in the white paper)
  rpc Sync (SyncRequest) returns (SyncResponse) {}
}