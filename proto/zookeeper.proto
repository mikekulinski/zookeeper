syntax = "proto3";

package zookeeper;

option go_package = "github.com/mikekulinski/zookeeper/proto/zookeeper";

import "watch.proto";

/*
Messages for establishing and closing connections to Zookeeper.
*/
message ConnectRequest {
  // The UUID that represents the session.
  // TODO: Replace this with a field saved as a header.
  string client_id = 1;
}

message ConnectResponse{}

message CloseRequest{
  // The UUID that represents the session.
  // TODO: Replace this with a field saved as a header.
  string client_id = 2;
}

message CloseResponse{}

/*
Messages that define the schema of each of our main APIs for the service.
 */

message CreateRequest {
  // The virtual file path to the ZNode that we'd like to create. Follows standard Unix file path conventions.
  string path = 1;
  // The data that we'd like to save in the ZNode we're creating.
  bytes data = 2;

  enum Flag {
    // FLAG_EPHEMERAL indicates that the ZNode to be created should be automatically destroyed once the session
    // has been terminated (either intentionally or on failure).
    FLAG_EPHEMERAL = 0;

    // FLAG_SEQUENTIAL indicates that the node to be created should have a monotonically increasing counter appended
    // to the end of the provided name.
    FLAG_SEQUENTIAL = 1;
  }
  // Flags are an optional array of arguments to create different types of ZNodes.
  repeated Flag flags = 3;
}

message CreateResponse{
  // The name that Zookeeper has given to the ZNode. This is relevant when passing FLAG_SEQUENTIAL since the server
  // will add a monotonically increasing as a suffix to the name.
  string z_node_name = 1;
}

message DeleteRequest {
  // The virtual file path to the ZNode that we'd like to delete.
  string path = 1;
  // The version that this ZNode is expected to be at. If the versions do not match, then we will fail the request.
  int64 version = 2;
}

message DeleteResponse {}

message ExistsRequest {
  // The virtual file path to the ZNode we are checking.
  string path = 1;
  // A flag indicating whether we would like to receive a callback for when this file changes.
  bool watch = 2;
}

message ExistsResponse {
  message ResponseMessage {
    // Whether or not that file exists.
    bool exists = 1;
  }

  // The server can return multiple types in the response. Either the results of the initial query, or a watch event.
  oneof message {
    ResponseMessage response = 1;
    WatchEvent watch_event = 2;
  }
}

message GetDataRequest {
  // The virtual file path to the ZNode we are checking.
  string path = 1;
  // A flag indicating whether we would like to receive a callback for when this file changes.
  bool watch = 2;
}

message GetDataResponse {
  message ResponseMessage {
    // The data saved at this ZNode.
    bytes data = 1;
    // The version of this ZNode.
    int64 version = 2;
  }

  // The server can return multiple types in the response. Either the results of the initial query, or a watch event.
  oneof message {
    ResponseMessage response = 1;
    WatchEvent watch_event = 2;
  }
}

message SetDataRequest {
  // The virtual file path to the ZNode we are checking.
  string path = 1;
  // The data to save on this ZNode.
  bytes data = 2;
  // The version we expect this ZNode to be at.
  int64 version = 3;
}

message SetDataResponse {}

message GetChildrenRequest {
  // The virtual file path to the ZNode we are checking.
  string path = 1;
  // A flag indicating whether we would like to receive a callback for when any of the children of this ZNode change.
  bool watch = 2;
}

message GetChildrenResponse {
  message ResponseMessage {
    // The file names of the children of the requested ZNode. This is just the file name. You can get the full path
    // by appending this to the path to the parent.
    // i.e. {parent_path}/{child_name}
    repeated string children = 1;
  }

  // The server can return multiple types in the response. Either the results of the initial query, or a watch event.
  oneof message {
    ResponseMessage response = 1;
    WatchEvent watch_event = 2;
  }
}

message SyncRequest {
  // The virtual file path to the ZNode we are checking. This path is currently unused.
  string path = 1;
}

message SyncResponse {}


message ZookeeperRequest {
  oneof message {
    // Connect establishes the connection and sets up recurring heartbeat messages to be sent from client -> server.
    ConnectRequest connect = 1;
    // Close will destroy the connection between the client and the server so the server will stop sending messages.
    CloseRequest close = 2;
    // Create creates a ZNode with path name path, stores data in it, and returns the name of the new ZNode
    // Flags can also be passed to pick certain attributes you want the ZNode to have.
    CreateRequest create = 3;
    // Delete deletes the ZNode at the given path if that ZNode is at the expected version.
    DeleteRequest delete = 4;
    // Exists returns true if the ZNode with path name path exists, and returns false otherwise. The watch flag
    // enables a client to set a watch on the ZNode.
    ExistsRequest exists = 5;
    // GetData returns the data and metadata, such as version information, associated with the ZNode.
    // The watch flag works in the same way as it does for exists(), except that ZooKeeper does not set the watch
    // if the ZNode does not exist.
    GetDataRequest get_data = 6;
    // SetData writes data to the ZNode path if the version number is the current version of the ZNode.
    SetDataRequest set_data = 7;
    // GetChildren returns the set of names of the children of a ZNode.
    GetChildrenRequest get_children = 8;
    // Sync waits for all updates pending at the start of the operation to propagate to the server
    // that the client is connected to. The path is currently ignored. (Using path is not discussed in the white paper)
    SyncRequest sync = 9;
    // TODO: Heartbeat.
  }
}

message ZookeeperResponse {
  oneof message {
    ConnectResponse connect = 1;
    CloseResponse close = 2;
    CreateResponse create = 3;
    DeleteResponse delete = 4;
    ExistsResponse exists = 5;
    GetDataResponse get_data = 6;
    SetDataResponse set_data = 7;
    GetChildrenResponse get_children = 8;
    SyncResponse sync = 9;
    WatchEvent watch_event = 10;
    // TODO: Heartbeat.
  }
}

// Zookeeper is gRPC implementation of the Zookeeper outlined in the following white paper.
// www.usenix.org/legacy/event/atc10/tech/full_papers/Hunt.pdf
// Because both the client and server will be sending messages to each other, we will model the system as a
// bidirectional gRPC stream.
service Zookeeper {
  // SendMessage is the generic bidirectional stream used for all communication between client and server.
  rpc SendMessage (stream ZookeeperRequest) returns (stream ZookeeperResponse) {}
}